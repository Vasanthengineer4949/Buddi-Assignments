## Problem 
# 1. Write a program that will do a grid search on a, b, c to find the correct quadratic function that minimizes the error between expected Y and estimated Y for a given X.
# 2. You can use Mean Absolute Error (L1) or Mean Square Error (L2) as the error metric.
# 3. A quadratic equation is of the form Y = aX^2 + bX + c; this means every tuple generated by your grid search will give a quadratic that you will try to test against the <x,y> dataset.
# 4. Plot the <x,y> dataset to see the shape of the quadratic

## Hint

# 1. The function is a quadratic function
# 2. The values of a, b, and c are in the range [-5,5]
# 3. When you implement this your grid search will give out around 1331 tuples of (a,b,c)
# 4. When you measure the MAE or MSE, every tuple will give you an error estimate. Now, pick the tuple that scores the minimum MAE or MSE, that becomes your final answer.

from turtle import color
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

## Loading Data
df = pd.read_csv(r'assignment2.txt',sep=' ',)
df.head()

## Grid Search
def grid_search(n,m):
    mae = []
    thetas = []
    for a in range(n,m+1,1):
        for b in range(n,m+1,1):
            for c in range(n,m+1,1):
                thetas.append([a,b,c])
                y_pred = a*(df['x']**2) + b*df['x'] + c
                error = df['y'] - y_pred
                mae.append(np.mean(error))
    return mae,thetas

## Find optimal theta to minimize MAE
def find_optimal(mae,thetas):
    best_mae = min(list(map(abs,mae))) # Finds a min value from a list of absolute values of the MAE
    index_mae = mae.index(best_mae) # Finds the index of the min value
    return thetas[index_mae],best_mae # Returns the optimal theta and the min MAE i.e optimal a, b, c

## Plotting
def plot_qudratic(optimal_theta,data):
    pred = optimal_theta[0]*data['x']**2 + optimal_theta[1]*data['x'] + optimal_theta[2]
    plt.figure(figsize=(8,5),dpi=100)
    sns.scatterplot('x','y',data=data)
    sns.lineplot('x','y',data=data, color='red')
    sns.lineplot(df['x'],pred,color='green')
    out_equ = f'Y = ${optimal_theta[0]}x^2 + {optimal_theta[1]}x + {optimal_theta[2]}$'
    plt.text(-13, 1500, out_equ, fontsize = 24, bbox=dict(facecolor='green', alpha=0.7))
    plt.title('Assignment 2')
    plt.show()

mae,thetas = grid_search(-5,5)
print(len(mae))#
best_theta,best_mae = find_optimal(mae,thetas)
print('the optimal coefficent are :',best_theta)
print('the mean_absolute_error :',best_mae)
plot_qudratic(best_theta,df)
    